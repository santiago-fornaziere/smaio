unit UntFuncoes;


interface

uses
  System.IniFiles,
  System.SysUtils,
  Vcl.Dialogs,
  System.DateUtils;

type
  Tini = class
    private
      FProvider: string;
      FHost    : string;
      FDatabase: string;
      FUser: string;
      FPassword: string;
      procedure SetProvider(const Value: string);
      procedure SetHost(const Value: string);
      procedure SetDatabase(const Value: string);
      procedure SetUser(const Value: string);
      procedure SetPassword(const Value: string);
    public
      constructor Create;
      destructor Destroy; override;
      property Provider : string read FProvider write SetProvider;
      property Host : string  read FHost write SetHost;
      property Database : string read FDatabase write SetDatabase;
      property User : string read FUser write SetUser;
      property Password : string read FPassword write SetPassword;
  end;

  TSistema = record
    Path_Executavel        : String;
    Path_SQL               : String;
  end;

  var
     Sistema : TSistema;

  function ValidaConexao: Tini;
  function JSONDateToDatetime(JSONDate: string): TDatetime;

implementation

function JSONDateToDatetime(JSONDate: string): TDatetime;
var Year, Month, Day, Hour, Minute, Second, Millisecond: Word;
begin
  if not (Length(JSONDate) > 9) then
     raise Exception.Create('Erro na data enviada.');

  Year        := StrToInt(Copy(JSONDate, 1, 4));
  Month       := StrToInt(Copy(JSONDate, 6, 2));
  Day         := StrToInt(Copy(JSONDate, 9, 2));
  try
    Hour        := StrToInt(Copy(JSONDate, 12, 2));
    Minute      := StrToInt(Copy(JSONDate, 15, 2));
    Second      := StrToInt(Copy(JSONDate, 18, 2));
    Millisecond := Round(StrToFloat(Copy(JSONDate, 21, 3)));
    Result := EncodeDateTime(Year, Month, Day, Hour, Minute, Second, Millisecond);
  except
    Hour        := 0;
    Minute      := 0;
    Second      := 0;
    Result := EncodeDate(Year, Month, Day);
  end;

end;

function ValidaConexao: Tini;
var vIpServer
  , vDbServer
  , vProvider
  , vUserServer
  , vPwdServer : String;
  vConfigIni : TInifile;
  vIni : Tini;
begin
  vIni := Tini.Create;
  vConfigIni  := TIniFile.Create(ExtractFilePath(ParamSTR(0))+'Config.Ini');
  vIpServer   := vConfigIni.ReadString('SGDB', 'IP', 'IP - Não foi informado o IP SERVIDOR no arquivo de configuração');
  vProvider   := vConfigIni.ReadString('SGDB', 'PROVIDER', 'PROVIDER - Não foi informado o PROVIDER [ORACLE, SQL SERVER, DB2, MYSQL] no arquivo de configuração');
  vDbServer   := vConfigIni.ReadString('SGDB', 'DB', 'DB - Não foi informado o NOME DO OWNER/BASE DE DADOS da aplicação no arquivo de configuração');
  vUserServer := vConfigIni.ReadString('SGDB', 'USER', 'USER - Não foi informado o USER DO SGDB no arquivo de configuração');
  vPwdServer  := vConfigIni.ReadString('SGDB', 'PW', 'PW - Não foi informado a PASSWORD SERVIDOR no arquivo de configuração');

  vIni.SetProvider(vProvider);
  vIni.SetHost(vIpServer);
  vIni.SetDatabase(vDbServer);
  vIni.SetUser(vUserServer);
  vIni.SetPassword(vPwdServer);
  Result := vIni;
end;


{ Tini }

constructor Tini.Create;
begin

end;

destructor Tini.Destroy;
begin

  inherited;
end;

procedure Tini.SetDatabase(const Value: string);
begin
  if not Length(Value) > 3 then
     raise Exception.Create('Database não informada corretamente.');
  FDatabase := Value;
end;

procedure Tini.SetHost(const Value: string);
begin
  if not Length(Value) > 3 then
     raise Exception.Create('Host não informado corretamente.');
  FHost := Value;
end;

procedure Tini.SetPassword(const Value: string);
begin
  if not Length(Value) > 3 then
     raise Exception.Create('Password não informado corretamente.');
  FPassword := Value;
end;

procedure Tini.SetProvider(const Value: string);
begin
  if not Length(Value) > 3 then
     raise Exception.Create('Provider não informado corretamente.');
  FProvider := Value;
end;

procedure Tini.SetUser(const Value: string);
begin
  if not Length(Value) > 3 then
     raise Exception.Create('Usuário não informado corretamente.');
  FUser := Value;
end;

end.
