unit UntDmConexao;

interface

uses
  System.SysUtils,
  System.Classes,
  UniProvider,
  SQLServerUniProvider,
  Data.DB,
  DBAccess,
  Uni,
  DASQLMonitor,
  UniSQLMonitor,
  UntFuncoes, MySQLUniProvider;

type
  TDmConexao = class(TDataModule)
    DbConexao: TUniConnection;
    SqlServerProvider: TSQLServerUniProvider;
    Monitor: TUniSQLMonitor;
    MySQLProvider: TMySQLUniProvider;
    procedure DataModuleCreate(Sender: TObject);
    procedure DbConexaoError(Sender: TObject; E: EDAError; var Fail: Boolean);
    procedure DbConexaoConnectionLost(Sender: TObject; Component: TComponent;
      ConnLostCause: TConnLostCause; var RetryMode: TRetryMode);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  DmConexao: TDmConexao;


implementation


{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}


procedure TDmConexao.DataModuleCreate(Sender: TObject);
var vIni : Tini;
begin
  vIni := Tini.Create;
  try
    vIni := ValidaConexao;
    DbConexao.Connected := False;
    DbConexao.Database := vIni.Database;
    DbConexao.ProviderName := vIni.Provider;
    DbConexao.Server := vIni.Host;
    DbConexao.Username := vIni.User;
    DbConexao.Password := vIni.Password;
    DbConexao.Connected := True;

    if not DirectoryExists(ExtractFilePath(ParamStr(0))+'SQL\') then
       forceDirectories(ExtractFilePath(ParamStr(0))+'SQL\');

    Sistema.Path_Executavel   := ExtractFilePath(ParamStr(0));
    Sistema.Path_SQL          := Sistema.Path_Executavel+'SQL\';
  finally
    FreeAndNil(vIni);
  end;
end;

procedure TDmConexao.DbConexaoConnectionLost(Sender: TObject;
  Component: TComponent; ConnLostCause: TConnLostCause;
  var RetryMode: TRetryMode);
begin
     RetryMode := rmReconnect;
end;

procedure TDmConexao.DbConexaoError(Sender: TObject; E: EDAError;
  var Fail: Boolean);
begin
     Fail := False;

end;

end.
