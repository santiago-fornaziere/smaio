unit UntController.Smaio.VeiculoAno;

interface

uses
  System.SysUtils,
  Vcl.Dialogs,
  UntFuncoes,
  System.Generics.Collections,
  System.JSON,
  DataSet.Serialize,
  Horse,
  UntController.Authorization,
  UntModel.Query,
  UntModel.VeiculoAno;

  procedure registrar;

  var
     campos_insert : Array of String = ['vano_vei_id', 'vano_ano_id'];
     campos_update : Array of String = [];



implementation

function SaveDB(pJSON : TJSONObject; pID : integer = 0) : TJSONObject;
begin
  Result := TJSONObject.Create;
  try
    if pID = 0 then
    begin
      if not AssignFieldsApi(campos_insert, pJSON) then
         exit;
      Result := TVeiculoAno
                  .New
                    .vano_vei_id(pJson.Values['vano_vei_id'].Value.ToInteger())
                    .vano_ano_id(pJson.Values['vano_ano_id'].Value.ToInteger())
                    .Cadastrar
    end;
  except
    on E: Exception do
    begin
         raise Exception.Create(E.message);
    end;
  end;
end;

procedure Append(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
   vJSON : TJSONObject;
begin
  vJSON := TJSONObject.Create;
  vJSON := Req.Body<TJSONObject>;
  try
    Res.Send<TJSONAncestor>(SaveDB(vJSON)).Status(201);
  finally
    FreeAndNil(vJSON);
  end;
end;

procedure registrar;
begin
  THorse.Post('smaio/veiano', Authorization(), Append);
  THorse.Delete('smaio/veiano/:id', Authorization(), Delete);
  THorse.Get( 'smaio/veiano/localizar/:id', Authorization(), Get);
end;

end.
